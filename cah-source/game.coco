import os
import random
from collections import deque

from cah.parser import whites, blacks, cards_dir

all_files = cards_dir |> os.listdir
white_files = all_files |> filter$(.endswith("a.txt")) |> tuple
black_files = all_files |> filter$(.endswith("q.txt")) |> tuple

def interrupt():
    raise KeyboardInterrupt()

class CAH:
    def __init__(self, num_cards):
        self.num_cards = num_cards
        self.whites = white_files |> list
        self.blacks = black_files |> list
        self.setup()

    def setup(self, sender=None):
        if sender is not None:
            self.bot.send("Game restarted by %s." % sender)

        self.white_cards = self.whites |> whites
        self.black_cards = self.blacks |> blacks

        random.shuffle(self.white_cards)
        random.shuffle(self.black_cards)

        self.round_cards = {}
        self.player_cards = {}
        self.player_scores = {}
        self.players = []
        self.state = "idle"

    def handlers(self, sender) = {
        # "cmd": (func, args, state)
        "help": (self.show_help$(sender), 0, None),
        "status": (self.show_status$(sender), 0, None),
        "play": (self.play_card$(sender), None, "play"),
        "pick": (self.pick_card$(sender), None, "pick"),
        "cards": (self.show_cards$(sender), 0, "play"),
        "scores": (self.show_scores$(sender), 0, None),
        "players": (self.show_players$(sender), 0, None),
        "sets": (self.show_sets$(sender), 0, None),
        "join": (self.add_player$(sender), 0, None),
        "leave": (self.rem_player$(sender), 0, None),
        "add": (self.add_player, 1, None),
        "kick": (self.add_player, 1, None),
        "start": (self.start$(sender), 0, "idle"),
        "addset": (self.add_set$(sender), 1, "idle"),
        "remset": (self.rem_set$(sender), 1, "idle"),
        "broadcast": (self.show_status$(None), 0, None),
        "restart": (self.setup$(sender), 0, None),
        "kill": (interrupt, 0, None),
    }

    def handle_msg(self, bot, sender, message):
        self.bot = bot
        cmd = message.split()
        if not cmd:
            cmd = ["help"]
        for arg, (func, nargs, state) in self.handlers(sender).items():
            if cmd[0] == arg:
                if state is not None and self.state != state:
                    self.bot.send_to(sender, "The %r command is not available right now." % arg)
                elif nargs is None:
                    func(" ".join(cmd[1:]))
                elif len(cmd) != nargs + 1:
                    self.bot.send_to(sender, "The %r command requires %s arguments." % (arg, nargs))
                elif nargs:
                    func(*cmd[-nargs:])
                else:
                    func()
                return
        self.bot.send_to(sender, "Unrecognized command %r." % message)

    def add_set(self, sender, name):
        white_name = name + "a.txt"
        black_name = name + "q.txt"
        if white_name in self.whites or black_name in self.blacks:
            self.bot.send_to(sender, "Set %r already included." % name)
            return
        if white_name not in white_files:
            white_name = None
        if black_name not in black_files:
            black_name = None
        if not (white_name or black_name):
            self.bot.send_to(sender, "No such set %r." % name)
            return
        if white_name:
            self.whites.append(white_name)
        if black_name:
            self.blacks.append(black_name)

    def rem_set(self, sender, name):
        white_name = name + "a.txt"
        black_name = name + "q.txt"
        if white_name not in self.whites and black_name not in self.blacks:
            self.bot.send_to(sender, "Not using set %r." % name)
        if white_name in self.whites:
            self.whites.remove(white_name)
        if black_name in self.blacks:
            self.blacks.remove(black_name)

    def card_str(self, sender):
        cards = []
        for i, card in enumerate(self.player_cards[sender]):
            str(i) + ". " + str(card) |> cards.append
        return "\n".join(cards)

    def score_str(self):
        scores = []
        for player, score in self.player_scores.items():
            "  " + player + ": " + str(score) |> scores.append
        return "\n".join(scores)

    def sets_str(self):
        sets = s{}
        for name in self.whites :: self.blacks:
            name[:-5] |> sets.add
        return ", ".join(sets)

    def new_cardczar(self):
        self.players.rotate(1)

    @property
    def cardczar(self):
        if self.players:
            return self.players[0]
        else:
            return ""

    def all_played(self):
        for player in self.players:
            if self.cardczar != player and (
                player not in self.round_cards
                or len(self.round_cards[player]) < self.black_card.blanks
            ):
                return False
        return True

    def give_cards(self, sender, num):
        [self.white_cards.pop() for i in range(num)] |> self.player_cards[sender].extend

    @property
    def num_players(self) =
        len(self.player_cards)

    def show_players(self, sender=None):
        self.bot.send_to(sender, "Players: " + ", ".join(self.player_cards))

    def show_help(self, sender=None):
        self.bot.send_to(sender, "Known commands: " + ", ".join(self.handlers(sender))
            + "\nTo get specific information on what's going on right now, type 'cah status'.")

    def show_status(self, sender=None):
        if self.state == "idle":
            self.bot.send_to(sender, "Waiting for game to start. Type 'cah join' to join the game or 'cah start' to start the game.")
        elif self.state == "play":
            self.bot.send_to(sender, "Card Czar: %s\nPlaying on black card:\n  %s\nType 'cah play' to play a card."
                % (self.cardczar, self.black_card))
        elif self.state == "pick":
            self.bot.send_to(sender, "Card Czar: %s\nPicking best submission for black card:\n  %s\nType 'cah pick' to pick a card."
                % (self.cardczar, self.black_card))
        else:
            self.show_help(sender)

    def show_sets(self, sender=None):
        self.bot.send_to(sender, "Using sets: " + self.sets_str())

    def show_scores(self, sender=None):
        self.bot.send_to(sender, "Current scores:\n%s" % self.score_str())

    def show_cards(self, sender):
        self.bot.send_to(sender, "White cards in hand:\n%s" % self.card_str(sender))

    def start(self, sender=None):
        if self.num_players < 3:
            self.bot.send_to(sender, "Not enough players to start.")
        else:
            self.bot.send("Starting the game!")
            self.show_players()
            self.next_round()

    def add_player(self, player):
        if player in self.player_cards:
            self.bot.send_to(player, "You are already in the game.")
            return
        self.player_cards[player] = []
        self.player_scores[player] = 0
        self.give_cards(player, self.num_cards)
        self.bot.send("%s has joined the game." % player)
        if self.state == "play" or self.state == "pick":
            self.bot.send("Resetting round.")
            self.next_round()

    def rem_player(self, player):
        if player not in self.player_cards:
            self.bot.send("Player %s is not in the game." % player)
            return
        del self.player_cards[player]
        del self.player_scores[player]
        self.bot.send("%s has left the game." % player)
        if self.state == "play" or self.state == "pick":
            self.bot.send("Resetting round.")
            self.next_round()

    def refresh_cards(self):
        for player, cards in self.player_cards.items():
            if len(cards) < self.num_cards:
                self.give_cards(player, self.num_cards - len(cards))

    def new_black_card(self):
        self.round_cards = {}
        self.black_card = self.black_cards.pop()

    def next_round(self):
        if set(self.players) != set(self.player_cards):
            self.players = deque(self.player_cards.keys())
        self.state = "play"
        self.refresh_cards()
        self.new_cardczar()
        self.new_black_card()
        self.bot.send("Starting new round!\nCard Czar: %s\nBlack card:\n  %s" % (self.cardczar, self.black_card))
        self.send_cards()

    def send_cards(self):
        for player in self.players:
            self.show_cards(player)
            if self.cardczar != player:
                self.bot.send_to(player, "Playing on black card:\n  %s" % (self.black_card,))

    def match_card(self, player, cards, match_to):
        match_to = match_to.lower()
        try:
            index = int(match_to)
        except ValueError:
            matching = []
            for i, card in enumerate(cards):
                if card.matches(match_to):
                    matching.append(i)
            if not matching:
                self.bot.send_to(player, "Unknown card index/prefix: %r\nType 'cah cards' to list cards in hand." % match_to)
            elif len(matching) == 1:
                return matching[0]
            else:
                self.bot.send_to(player, "Prefix matches multiple cards:\n"
                    + "; ".join(str(cards[i]) for i in matching))
        else:
            return index
        return None

    def play_card(self, sender, name):
        if self.cardczar == sender:
            self.bot.send_to(sender, "You can't play any cards; you're the card czar.")
            return

        index = name.strip() |> self.match_card$(sender, self.player_cards[sender])
        if index is None:
            return
        white = self.player_cards[sender][index]

        if not sender in self.round_cards:
            self.round_cards[sender] = [white]
        elif len(self.round_cards[sender]) < self.black_card.blanks:
            self.round_cards[sender].append(white)
        else:
            self.bot.send_to(sender, "You've already played enough cards.")
            return
        self.player_cards[sender].pop(index)

        self.bot.send_to(sender, "You played: %s" % (white,))
        cards_left = self.black_card.blanks - len(self.round_cards[sender])
        if cards_left:
            self.bot.send_to(sender, "You still need to play %s more cards." % cards_left)
        else:
            self.bot.send_to(sender, "Your submission is in!")

        if self.all_played():
            self.state = "pick"
            self.picking()

    def picking(self):
        for player in self.round_cards:
            self.give_cards(player, self.black_card.blanks)

        choices = self.round_cards.values() |> list
        random.shuffle(choices)

        self.bot.send("Time to choose, %s!\nThe black card was:\n  %s\nYour choices are:\n%s" % (
            self.cardczar, self.black_card, "\n".join("  " + "; ".join(str(c) for c in cards) for cards in choices)))

    def pick_card(self, sender, name):
        if self.cardczar != sender:
            self.bot.send_to(sender, "Only the card czar can pick a card.")
            return

        match_to = name.strip().lower()
        matching = []
        for player in self.round_cards:
            for card in self.round_cards[player]:
                if card.matches(name):
                    matching.append((player, card))
        if not matching:
            self.bot.send_to(self.cardczar, "Unknown card prefix: %r" % match_to)
        elif len(matching) == 1:
            player = matching[0][0]
            self.player_scores[player] += 1
            self.bot.send("The point goes to %s, with the winning entry:\n  %s" %
                (player, "; ".join(str(card) for card in self.round_cards[player]))
            self.show_scores()
            self.next_round()
        else:
            self.bot.send_to(player, "Prefix matches multiple cards:\n"
                + "; ".join(str(card) for (player, card) in matching))
