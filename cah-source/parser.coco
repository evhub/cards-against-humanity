import os.path
import re

from cah.cards import WhiteCard, BlackCard
from cah.phrasegen import PhraseGen

def white_card(text) =
    WhiteCard(text).verify()

end_digit = re.compile(r"(.*)\((\d+)\)")
def black_card(text) =
    text |>= makesubs
    result = end_digit.\match(text)
    if result is not None:
        text, blanks = result.groups()
    else:
        blanks = 0
        in_blank = False
        escape = False
        for c in text:
            if c == "\\":
                escape = not escape
            elif not escape and not in_blank and c == "_":
                blanks += 1
                in_blank = True
            else:
                in_blank = False
        if blanks == 0:
            blanks = 1
    BlackCard(text, blanks |> int).verify()

class Comment:
    def __getattr__(self, attr) = ""

class Phrase:
    act = PhraseGen("ACT")
    pas = PhraseGen("PAS")
    inf = PhraseGen("INF")
    fut = PhraseGen("FUT")

def makesubs(text) =
    text.format(**{
        "n": "\n",
        "phrase": Phrase(),
        "comment": Comment(),
    })

cards_dir = os.path.join(os.path.dirname(__file__), "cards")

def read_cards(to_card, filenames) =
    cards = s{}
    for fname in filenames:
        print(fname + "...")
        with open(os.path.join(cards_dir, fname), "r", encoding="utf8") as file:
            for line in file.readlines():
                line = makesubs(line).strip()
                if line:
                    to_card(line) |> cards.add
    list(cards)

whites = read_cards$(white_card)
blacks = read_cards$(black_card)
